{"version":3,"sources":["logo.svg","components/Authentication.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","require","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","firestore","auth","Authentication","props","state","email","passwort","handleChange","bind","signup","login","signInWithEmailAndPassword","this","catch","e","console","log","messsage","currentUser","window","location","href","uid","user","createUserWithEmailAndPassword","then","collection","doc","set","benutzername","color","data","invites","event","target","name","value","setState","className","id","style","fontSize","paddingTop","paddingBottom","marginTop","borderBottom","width","margin","type","onChange","placeholder","display","justifyContent","Button","onClick","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,4KCKrCC,EAAWC,EAAQ,IAEzBA,EAAQ,IAcHD,EAASE,KAAKC,QACjBH,EAASI,cAZU,CACnBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMjBZ,EAASa,YAET,IAAMC,EAAKd,EAASe,YACdC,EAAOhB,EAASgB,OA2EPC,E,kDAxEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,GACPC,SAAU,IAGd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBACd,EAAKE,MAAQ,EAAKA,MAAMF,KAAX,gBATE,E,oDAcCP,EAAKU,2BADRC,KAC2CR,MAAMC,MADjDO,KACgER,MAAME,UAC3EO,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,EAAEG,aACjCF,QAAQC,IAAI/B,EAASgB,OAAOiB,aAC5BC,OAAOC,SAASC,KAAO,QAAUpC,EAASgB,OAAOiB,YAAYI,M,+BAI7D,IACIC,EACYtB,EAAKuB,+BAFRZ,KAE+CR,MAAMC,MAFrDO,KAEoER,MAAME,UACtFmB,MAAK,WACFF,EAAOtC,EAASgB,OAAOiB,YACvBnB,EAAG2B,WAAW,QAAQC,IAAIJ,EAAKD,KAAKM,IAAI,CACxCvB,MAAMkB,EAAKlB,MACXwB,aAAaN,EAAKlB,MAClByB,MAAO,OACPC,KAAM,GACNC,QAAQ,KACLP,MAAK,WACJV,QAAQC,IAAI,qBACZG,OAAOC,SAASC,KAAO,QAAUE,EAAKD,Y,mCAQrCW,GAAQ,IAAD,EACMA,EAAMC,OAArBC,EADS,EACTA,KAAMC,EADG,EACHA,MACbxB,KAAKyB,SAAL,eACKF,EAAMC,M,+BAKX,OACI,yBAAKE,UAAU,QACZ,yBAAKC,GAAG,OAAOC,MAAO,CAACC,SAAS,OAAQX,MAAM,UAAUY,WAAW,OAAQC,cAAc,SACpF,0BAAMH,MAAO,CAACI,UAAW,QAASN,UAAU,QAA5C,cACA,uCACM,wCAGV,yBAAKE,MAAO,CAACK,aAAa,iBAAkBC,MAAM,MAAOC,OAAO,OAAQJ,cAAc,SACtF,2BAAOK,KAAK,OAAOb,KAAK,QAAQc,SAAUrC,KAAKL,aAAc6B,MAAOxB,KAAKR,MAAMC,MAAO6C,YAAY,sBAClG,2BAAOF,KAAK,WAAWb,KAAK,WAAWc,SAAUrC,KAAKL,aAAc6B,MAAOxB,KAAKR,MAAME,SAAU4C,YAAY,cAE5G,yBAAKV,MAAO,CAACW,QAAQ,cAAcR,cAAc,OAAQG,MAAM,MAAOM,eAAe,SAAUR,UAAU,SACzG,kBAACS,EAAA,EAAD,CAAQvB,MAAM,UAAUU,MAAO,CAACO,OAAO,OAAQO,QAAS1C,KAAKF,OAA7D,SACA,kBAAC2C,EAAA,EAAD,CAAQvB,MAAM,UAAUU,MAAO,CAACO,OAAO,OAAQO,QAAS1C,KAAKH,QAA7D,sB,GAjEa8C,IAAMC,W,MCjBpBC,MANf,WACE,OACE,kBAAC,EAAD,OCIgBC,QACW,cAA7BvC,OAAOC,SAASuC,UAEe,UAA7BxC,OAAOC,SAASuC,UAEhBxC,OAAOC,SAASuC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdzD,OAAM,SAAA0D,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.633497ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\"\n\nimport {Modal, Button, Row, Col, Form} from 'react-bootstrap'\n\n\nconst firebase = require(\"firebase\");\n// Required for side-effects\nrequire(\"firebase/firestore\");\n\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBfVMQV20BwYzMWVb-zw92kG9LhynJL_Fc\",\n  authDomain: \"simplyplanned-b0b19.firebaseapp.com\",\n  databaseURL: \"https://simplyplanned-b0b19.firebaseio.com\",\n  projectId: \"simplyplanned-b0b19\",\n  storageBucket: \"simplyplanned-b0b19.appspot.com\",\n  messagingSenderId: \"569252531313\",\n  appId: \"1:569252531313:web:46eb1ec22c33c5edad1fd0\",\n  measurementId: \"G-QR1NGBW578\"\n};\n// Initialize Firebase\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\nfirebase.analytics();\n\nconst db = firebase.firestore();\nconst auth = firebase.auth();\n\nclass Authentication extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            passwort: \"\"\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.signup = this.signup.bind(this)\n        this.login = this.login.bind(this)\n    }\n\n    login() {\n        let current= this;\n        const promise = auth.signInWithEmailAndPassword(current.state.email, current.state.passwort);\n        promise.catch(e => console.log(e.messsage))\n        console.log(firebase.auth().currentUser)\n        window.location.href = \"/?id=\" + firebase.auth().currentUser.uid;\n    }\n\n    signup() {\n        let current= this;\n        let user;\n        const promise = auth.createUserWithEmailAndPassword(current.state.email, current.state.passwort)\n        .then(() => {\n            user = firebase.auth().currentUser\n            db.collection(\"user\").doc(user.uid).set({\n            email:user.email,\n            benutzername:user.email,\n            color: \"#333\",\n            data: [],\n            invites:[]\n            }).then(() => {\n                console.log(\"registration done\");\n                window.location.href = \"/?id=\" + user.uid;\n            })\n        \n        });\n       \n        \n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n        this.setState({\n            [name]:value\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"auth\">\n               <div id=\"logo\" style={{fontSize:\"30px\", color:\"#1a8fff\",paddingTop:\"60px\", paddingBottom:\"30px\"}}>\n                    <span style={{marginTop: \"-3px\"}} className=\"icon\">date_range</span>\n                    <span>\n                    simply<b>planned</b>\n                    </span>\n                </div>\n                <div style={{borderBottom:\"1px solid #333\", width:\"80%\", margin:\"auto\", paddingBottom:\"20px\"}} >\n                <input type=\"text\" name=\"email\" onChange={this.handleChange} value={this.state.email} placeholder=\"example@gmail.com\"/>\n                <input type=\"password\" name=\"passwort\" onChange={this.handleChange} value={this.state.passwort} placeholder=\"Passwort\" />\n                </div>\n                <div style={{display:\"inline-flex\",paddingBottom:\"20px\", width:\"80%\", justifyContent:\"center\", marginTop:\"20px\"}}>\n                <Button color=\"primary\" style={{margin:\"5px\"}} onClick={this.login}>Login</Button>\n                <Button color=\"primary\" style={{margin:\"5px\"}} onClick={this.signup}>Registrieren</Button>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Authentication;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Authentication from \"./components/Authentication\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Authentication />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}